#!/bin/bash

VERMELHO='\033[0;31m'
VERDE='\033[0;32m'
AMARELO='\033[0;33m'
PRETO='\033[30m'
AZUL='\033[0;34m'
CIANO='\033[0;36m'

FUNDO_BRANCO='\033[47m'

NEGRITO='\033[1m'

NC='\033[0m'

main() {
	while :;do
		menu
		processar_opcao
	done
}

menu() {

    trap '' SIGINT
    clear
    dia=$(date +%d)
    mes=$(date +%B)
    ano=$(date +%Y)

    texto_data="# Rio de Janeiro, ${AZUL}$dia${NC} de ${AZUL}$mes${NC} de ${AZUL}$ano${NC}"
    formatacao_data=$(printf "%-59s" "$texto_data")

    echo "############################################################"
    echo "# IBMEC                                                    #"
    echo -e "# Sistemas Operacionais                 Semestre ${AZUL}1${NC} de ${AZUL}2024${NC} #"
    echo "# Código IBM8940                        Turma 8001         #"
    echo "# Professor: Luiz Fernando T. Farias                       #"
    echo "#----------------------------------------------------------#"
    echo "# Equipe Desenvolvedora:                                   #"
    echo -e "#   Aluno: ${CIANO}João Pedro Martinez${NC}                             #"
    echo -e "#   Aluno: ${CIANO}Phillipe Secondo${NC}                                #"
    echo "#----------------------------------------------------------#"
    echo -e "$formatacao_data 			   #"
    echo -e "# Hora do Sistema: ${AZUL}$(date +%H)${NC} horas e ${AZUL}$(date +%M)${NC} minutos                   #"
    echo "############################################################"
    echo ""
    echo "Menu de Escolhas:"
    echo "  1) Gerenciador de Recursos"
    echo "  2) Gerenciador de senhas"
    echo "  3) Perguntar ao ChatGPT"
    echo "  4) Montar Partição"
    echo "  5) Relatorio"
    echo "  6) Finalizar Programa"
    echo ""
    echo "Selecione uma opção:"
}

montar_particao() {
    echo "Digite o dispositivo/partição que deseja criar (ex: /dev/sdb):"
    read  dispositivo
    echo "Digite a partição a ser formatada (ex: /dev/sdb1):"
    read  particao
    echo "Digite o Sistema de Arquivo que deseja usar:"
    read  sistemaArq
    echo "Digite o diretório de montagem:"
    read  particao_criada

    if [ ! -e "$dispositivo" ]; then
        echo "Dispositivo não conectado"
        return 1
    fi
    
    echo -e "n\np\n\n\n\nw" | sudo fdisk "$dispositivo"
    
    sudo mkfs."$sistemaArq" "$particao"
    
    sudo mkdir "$particao_criada"
    
    sudo mount "$particao" "$particao_criada"
	
    lsblk -f
    sleep 10    
}
# ------------------- Inicio Gerenciador de Recursos ----------------------

uso_cpu=0

uptime=0

let soma_cpu=0
ultima_leitura_cpu=0
let soma_ultima_leitura_cpu=0

let mem_total=0
let mem_livre=0
let mem_disponivel=0
let mem_em_uso=0
mem_em_uso_pct=0

gerenciador_de_recursos() {
	trap '' SIGINT
	stty -echo -icanon time 0 min 0
	
	while :;do
		key=$(dd bs=1 count=1 2>/dev/null)
		if [[ $key == 'q' ]]; then
			break
		fi

		recursos_cpu
		recurso_memoria

		clear

		interface_de_recursos

		sleep 2
	done

	stty sane
	stty erase ^H
}

interface_de_recursos() {
	echo -e "${FUNDO_BRANCO}${PRETO}Aperte a tecla q para sair${NC}"
	uptime_sistema
	echo "$uptime"
	print_uso_cpu
	print_recursos_memoria
}

print_recursos_memoria() {

	n_barras_verm=$(echo "scale=2; ($mem_em_uso_pct / 100) * 20" | bc | awk '{print int($1)}')
	n_barras_verd=$((20 - n_barras_verm))
	
	barras_verdes=$(printf "%${n_barras_verd}s" | tr ' ' '|')
	barras_verdes=$(echo -e "${VERDE}${barras_verdes}${NC}")

	barras_verm=$(printf "%${n_barras_verm}s" | tr ' ' '|')
        barras_verm=$(echo -e "${VERMELHO}${barras_verm}${NC}")

	barra_mem=$(echo "[$barras_verm$barras_verdes]")

	echo "Mem Total      : $mem_total GB"
        echo "Mem Livre      : $mem_livre GB"
        echo -e "Mem Disponivel : $mem_disponivel GB		$barra_mem${NEGRITO}$mem_em_uso GB/$mem_total GB${NC}"
        echo "Mem em uso     : $mem_em_uso GB"
        echo "Mem em uso     : $mem_em_uso_pct %"
}

print_uso_cpu() {

	
	local n_barras=$(echo "scale=0; $uso_cpu / 10" | bc)
	
	pipes=$(printf "%${n_barras}s" | tr ' ' '|')

	if [ $n_barras -le 5 ];then
		pipes=$(echo -e "${VERDE}${pipes}${NC}")
		uso_cpu=$(echo -e "${VERDE}${uso_cpu}%${NC}")
	elif [ $n_barras -gt 5 ] && [ $n_barras -lt 8 ];then
		pipes=$(echo -e "${AMARELO}${pipes}${NC}")
		uso_cpu=$(echo -e "${AMARELO}${uso_cpu}%${NC}")
	else
		pipes=$(echo -e "${VERMELHO}${pipes}${NC}")
		uso_cpu=$(echo -e "${VERMELHO}${uso_cpu}%${NC}")
	fi

	pontos=$(printf "%$((10 - n_barras))s" | tr ' ' '.')
	
	barra="[$pipes$pontos]"

	echo "Uso de CPU     : $barra$uso_cpu"
}

uptime_sistema() {
	linha_uptime=($(head -n 1 /proc/uptime))
	
	segundos_totais=${linha_uptime[0]}
	segundos_totais=${segundos_totais%.*}

	horas=$((segundos_totais/3600))
	minutos=$(((segundos_totais%3600)/60))
	segundos=$((segundos_totais%60))

	uptime=$(printf "Uptime         : %02d:%02d:%02d\n" $horas $minutos $segundos)
}

recurso_memoria() {
	linha_mem_total=($(head -n 1 /proc/meminfo))
	linha_mem_livre=($(head -n 2 /proc/meminfo | tail -n 1))	
	linha_mem_disponivel=($(head -n 3 /proc/meminfo | tail -n 1))

	mem_total=${linha_mem_total[1]}
	mem_livre=${linha_mem_livre[1]}
	mem_disponivel=${linha_mem_disponivel[1]}

	mem_em_uso=$((mem_total - mem_disponivel))
	mem_em_uso_pct=$(echo "scale=2; $mem_em_uso / $mem_total * 100" | bc)

	mem_total=$(echo "scale=1; $mem_total / 1000000" | bc)
	mem_total=$(echo "$mem_total" | sed 's/^\./0./')

	mem_livre=$(echo "scale=1; $mem_livre / 1000000" | bc)
	mem_livre=$(echo "$mem_livre" | sed 's/^\./0./')

	mem_disponivel=$(echo "scale=1; $mem_disponivel / 1000000" | bc)
	mem_disponivel=$(echo "$mem_disponivel" | sed 's/^\./0./')

	mem_em_uso=$(echo "scale=1; $mem_em_uso / 1000000" | bc)
	mem_em_uso=$(echo "$mem_em_uso" | sed 's/^\./0./')
}

recursos_cpu() {
	linha_cpu=($(head -n1 /proc/stat))

	soma_valores_cpu "${linha_cpu[@]:1}"
	
	cpu_delta=$((soma_cpu - soma_ultima_leitura_cpu))
	cpu_idle=$((linha_cpu[4] - ultima_leitura_cpu[4]))
	cpu_utilizado=$((cpu_delta - cpu_idle))
	uso_cpu=$(echo "scale=1; 100 * $cpu_utilizado / $cpu_delta" | bc -l)
	uso_cpu=$(echo "$uso_cpu" | sed 's/^\./0./')

	ultima_leitura_cpu=("${linha_cpu[@]}")
	soma_ultima_leitura_cpu=$soma_cpu	
}

soma_valores_cpu() {
	local soma=0

	for valor in "$@";do
		soma=$((soma + valor))
	done

	soma_cpu=$soma
}

# -------------------- Fim Gerenciador de Recursos --------------------------

# -------------------- Inicio Gerenciador de Senhas -------------------------

password=1548645534

interface_gerenciador_senhas() {
	clear
	echo "1) Salvar nova senha"
	echo "2) Excluir senha"
	echo "3) Listar senhas"
	echo "*) Insira qualquer tecla para sair"

	read -p "Selecione uma opção: " -r opcao
	case $opcao in
		1) salvar_nova_senha;;
		2) excluir_conta;;
		3) listar_senhas;;
		*) return;;
	esac
}

excluir_conta() {
	printa_senhas
	read -p "Digite o numero da senha a ser excluida: " linha

	descriptografar_arquivo
	
	sed -i "${linha}d" /home/virtual/AC_SO/senhas.txt

	criptografar_arquivo
}

listar_senhas(){
	printa_senhas
	read -p "Pressione qualquer tecla  para sair" -n1 -s
}

printa_senhas() {
	clear

	descriptografar_arquivo

	let n_linha=1
	while IFS= read linha
	do
		echo "$n_linha) ${linha[0]}	${linha[1]}"
		n_linha=$((n_linha + 1))
	done < "/home/virtual/AC_SO/senhas.txt"

	criptografar_arquivo
}

salvar_nova_senha() {
	clear

	read -p "Informe o identificador para a senha: " identificador 
	read -p "Informe o email para essa senha: " email

	stty -echo
	read -p "Informe a senha: " senha
	stty echo

	salva_arquivo_pass "$identificador" "$email" "$senha"

}

salva_arquivo_pass() {
	if [ -e "/home/virtual/AC_SO/senhas.enc" ];then
		descriptografar_arquivo
		echo "$1 $2 $3" >> senhas.txt
	else
		echo "$1 $2 $3" >> senhas.txt
	fi

	criptografar_arquivo

}

abri_arquivo_pass() {
	descriptografar_arquivo
}

criptografar_arquivo() {
	openssl enc -aes-256-cbc -in "/home/virtual/AC_SO/senhas.txt" -out "/home/virtual/AC_SO/senhas.enc" -pass pass:"$password" -pbkdf2 -iter 100000
	rm "/home/virtual/AC_SO/senhas.txt"
}

descriptografar_arquivo() {
	openssl enc -d -aes-256-cbc -in "/home/virtual/AC_SO/senhas.enc" -out "/home/virtual/AC_SO/senhas.txt" -pass pass:"$password" -pbkdf2 -iter 100000
	rm "/home/virtual/AC_SO/senhas.enc"
}

# -------------------- Fim Gerenciador de Senhas ----------------------------


finalizar_programa() {
	stty erase ^H
	clear
	exit
	echo "Programa Finalizado"
}

processar_opcao() {
    read -r opcao
    case $opcao in
        1) gerenciador_de_recursos ;;
        2) interface_gerenciador_senhas ;;
        3) processa_pesquisa_chatgpt ;;
        4) montar_particao ;;
	5) relatorio;;
	6) finalizar_programa;;
        *) echo "Opção inválida. Por favor, escolha novamente." ;;
    esac
}

relatorio() {

	clear

	while IFS= read linha
        do
                echo -e "$linha"
                n_linha=$((n_linha + 1))
        done < "/home/virtual/AC_SO/relatorio.txt"

	read -p "Digite algo para sair" key
	if [ $key ]; then
		return
	fi
}

processa_pesquisa_chatgpt() {
	echo "Informe a mensagem para o ChatGPT: "
	read mensagem
	mensagem_url=$(echo "$mensagem" | sed 's/ /+/g')
	func_comunica_gpt $mensagem_url
}

func_comunica_gpt() {
    firefox "https://chatgpt.com/?oai-dm=1&q=$1"
}

main
